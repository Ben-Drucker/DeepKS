.;This is the root directory of the DeepKS package.
├── .gitattributes;Contains Git LFS information.
├── .gitignore;Contains files to be ignored by Git.
├── .gitlab-ci.yml;Used by Gitlab pages
├── Gemfile;Used for Gitlab Pages.
├── api;Contains the API for the DeepKS package.
│   ├── cfg.py;Contains configuration paths for the API.
│   ├── default_paths.cfg.json;Contains data read by <code>./cfg.py</code>
│   ├── kin-info_file_format.txt
│   ├── main.py;Main API entry point.
│   ├── needleall.error
│   └── site-info_file_format.txt
├── architectures;Contains the architectures used in this package.
│   ├── .gitignore
│   └── HP_config_DB.tsv;Database of hyperparameter configurations.
├── bin;Contains various binary files (typically machine learning previously trained models).
│   ├── .gitignore
│   ├── deepks_gc_weights.0.0.1.gherkin;Model file for the group classifier.
│   └── deepks_nn_weights.0.0.1.gherkin;Model file for the neural networks.
├── build;Contains auxiliary build files.
│   ├── build_and_nvidia_script.sh;Shell script used to enable CUDA on HPC/apptainer.
│   └── cuda_wsl_installer.sh;Shell script used to install CUDA on WSL.
├── config;Contains global configuration files for the DeepKS package.
│   ├── cfg.py;Global configuration module. Has functions to set/get prediction modes and perform directory changes.
│   └── mode.cfg;Contains the current settings (prediction mode, verbosity mode ¡Not implemented yet.¡). This is read by <code>./cfg.py</code>.
├── data;Contains the data used in this package.
│   ├── kin_to_fam_to_grp_5.csv
│   ├── kin_to_fam_to_grp_821.csv
│   ├── preprocessing;Used to preprocess data into a format acceptable by the API and <code>torch</code>.
│   │   ├── 22588.derangement
│   │   ├── Kinase_Substrate_Dataset.gz
│   │   ├── PreprocessingSteps;Contains the preprocessing steps used to generate the data in this directory.
│   │   │   ├── .lintr;Contains information about what to and what not to lint in R.
│   │   │   ├── Kinase_Inference_Testing.R;Reads PSP data from excel file and creates raw data tables. 
│   │   │   ├── ML_data_pipeline.R;Reads raw data tables, downloads sequences from the internet and creates intermediate data tables.
│   │   │   ├── cache;Stores cached information about kinase groups from the internet. (Example Below.)
│   │   │   │   └── kinbase-cache.json;
│   │   │   ├── compare_different_scored_splits.py;Utility that compares the similarity of different train/val/test splits.
│   │   │   ├── complex_download_phospho.py;Script to get kinase groups and families by species. ¡Not working.¡ Will probably not be fixed. 
│   │   │   ├── debug_non_det.log
│   │   │   ├── download_psp.py;Module to download most recent version of PhosphositePlus Database from the internet.
│   │   │   ├── format_raw_data_DD.py;Module to transform intermediate data tables into tensors that can be read by <code>torch</code>. (The "DD" stands for "Double Data,", i.e., taking X inputs and outputting 2X inputs.)
│   │   │   ├── get_kin_fam_grp.py;Download kinase group and kinase family information from the internet.
│   │   │   ├── psp_exceptions.json;File of exceptions and modifications that have to be made to the PSP excel file.
│   │   │   ├── remove_overlaps.py;Script to remove instances of kinase-substrate pairs where the site is present in the training, validation, and test sets.
│   │   │   └── split_into_sets_individual_deterministic_top_k.py;Algorithms to split the data into training, validation and test sets, based on kinase groups and families.
│   │   ├── kin_to_fam_to_grp_5.csv
│   │   ├── kin_to_fam_to_grp_817.csv
│   │   ├── kin_to_fam_to_grp_821.csv
│   │   ├── kin_to_fam_to_grp_826.csv;Example of a kinase-family-group table with 826 entries.
│   │   ├── main.py;The entrypoint for the preprocessing pipeline.
│   │   ├── make_clean.py;Script to clean up data directory from files that can be regenerated using provided scripts.
│   │   ├── needleall.error
│   │   ├── pairwise_mtx_822.csv
│   │   ├── pairwise_mtx_826.csv
│   │   ├── pairwise_mtx_918.csv;Example of a pairwise distance matrix (918 kinases x 918 kinases)
│   │   ├── te_kins.json;List of kinases used in the test set (Uniprot gene names).
│   │   ├── te_kins_large.json
│   │   ├── tr_kins.json;List of kinases used in the training set (Uniprot gene names).
│   │   ├── tr_kins_large.json
│   │   ├── vl_kins.json;List of kinases used in the validation set (Uniprot gene names).
│   │   └── vl_kins_large.json
│   ├── raw_data;Contains raw and intermediate data.
│   │   ├── PSP_script_download.xlsx;Modified PSP data table
│   │   ├── cache;Cache storing uniprot kinase sequences.
│   │   │   ├── .gitignore
│   │   │   └── UNIPROT_kinase_sequences.fasta
│   │   ├── duplicates.csv
│   │   ├── kinase_seq_494.csv
│   │   ├── kinase_seq_822.txt
│   │   ├── kinase_seq_826.csv
│   │   ├── kinase_seq_918.csv
│   │   ├── raw_data_22473.csv
│   │   ├── raw_data_22588.csv
│   │   └── raw_data_45176_formatted_65.csv
│   ├── raw_data_162_group_classifier_formatted.csv
│   ├── raw_data_209_group_classifier_formatted.csv
│   ├── raw_data_31834_formatted_65_26610.csv
│   ├── raw_data_446_group_classifier_formatted.csv
│   ├── raw_data_45176_formatted_65.csv
│   ├── raw_data_6406_formatted_95_5616.csv
│   └── raw_data_6500_formatted_95_5698.csv
├── discovery;Contains files and subdirectories used for the discovery of new kinase-substrate predictions.
│   ├── .gitattributes
│   ├── all_human_pairs;Contains files used to generate the predictions for all human kinase-substrate pairs.
│   │   ├── .ipynb_checkpoints
│   │   ├── download_necessary_kinases.py;Download necessary kinase sequences from Uniprot.
│   │   ├── phosphosites_base.txt;Base file containing all human phosphosites.
│   │   ├── run_main_api.sh;Convenience script to run the main API to predict all human kinase-substrate pairs.
│   │   └── sequences_table.csv;Intermediate file as a product of <code>./download_necessary_kinases.py</code>.
│   ├── discovery_preparation.py;Contains scripts to process discovery data into a form that can be accepted by the API.
│   └── nature_atlas;Contains files used to validate DeepKS against the <a href='https://www.nature.com/articles/s41586-022-05575-3'> Nature Atlas paper</a>.
│       ├── .gitignore
│       ├── .ipynb_checkpoints
│       │   └── get_sites_and_kinases-checkpoint.ipynb
│       ├── 41586_2022_5575_MOESM3_ESM.csv
│       ├── 41586_2022_5575_MOESM5_ESM.csv
│       ├── PSP_site_list.csv
│       ├── PSP_site_list_small.csv
│       ├── atlas_vs_deepks_1_processing.ipynb;Notebook containing scripts to enable comparison between DeepKS and Atlas.
│       ├── atlas_vs_deepks_2_figures.ipynb;Notebook containing scripts to plot figures representing the comparison between DeepKS and Atlas.
│       ├── atlas_vs_deepks_3_corroboration.ipynb;Notebook containing scripts to corroborate the PSP database and Atlas's results.
│       ├── compact_kinase_info_10.json
│       ├── compact_site_info_86201.json
│       ├── derived_df.csv
│       ├── geckodriver.log
│       ├── get_sites_and_kinases.py;Script that helps extract the necessary kinase sequences and site sequences from Atlas's data.
│       ├── kinase_list_10.txt
│       ├── kinase_sites_ST_150.csv
│       ├── our_percentiles.csv
│       ├── our_ranks.csv
│       ├── our_raw_scores.csv
│       ├── percentile_score_correlation.png
│       ├── run_main_api.sh
│       ├── scrape.py;Script that is a precursor for <code>./atlas_vs_deepks_3_corroboration.ipynb</code> that gets Atlas predictions for the PSP database sites.
│       ├── site_list_86201.txt
│       ├── site_list_89784.txt
│       ├── their_percentiles.csv
│       └── their_ranks.csv
├── docs;Contains files used to generate the documentation.
│   ├── api_pydoctor_docs
│   │   ├── ajax.js
│   │   ├── all-documents.html
│   │   ├── apidocs.css
│   │   ├── bootstrap.min.css
│   │   ├── classIndex.html
│   │   ├── extra.css
│   │   ├── fonts
│   │   │   ├── info.svg
│   │   │   └── x-circle.svg
│   │   ├── fullsearchindex.json
│   │   ├── index.html
│   │   ├── lunr.js
│   │   ├── moduleIndex.html
│   │   ├── nameIndex.html
│   │   ├── objects.inv
│   │   ├── pydoctor.js
│   │   ├── search.js
│   │   ├── searchindex.json
│   │   ├── searchlib.js
│   │   ├── sidebartoggle.js
│   │   └── undoccedSummary.html
│   ├── cuda_installation.html;HTML rendering of the CUDA installation guide.
│   ├── cuda_installation.md;Markdown version of the CUDA installation guide.
│   ├── index.html;HTML rendering of the main documentation page; Used by Github pages to generate main webpage.
│   ├── index.md;Markdown version of the main documentation page.
│   ├── quickstart.html;HTML rendering of the quickstart guide.
│   ├── quickstart.md;Markdown version of the quickstart guide.
│   ├── tree.html;HTML file that displays a tree of DeepKS Repository.
│   └── tree_description.txt;Similar to <code>tree.html</code>'s tree listing, but stripped down to be essentially key-value pairs of [file/dir] -> [description] in the format <code>my_file.txt;A sample description of <code>my_file.</code></code>
├── examples;Examples one can run to get a feel for the API.
│   ├── __main__.py;Entrypoint wrapper for running examples. Calls <code>./examples.py</code>.
│   ├── examples.pdf;PDF of how the example output should look.
│   └── examples.py;Contains examples of how to use the API.
├── hpc;Contains HPC initialization script.
│   └── .interactive_slurm_script.py;Script to interactively initialize a Slurm job on a High Performance Computing cluster.
├── images;Contains subdirectories with scripts to generate images, graphs, and diagrams for DeepKS.
│   ├── Animation
│   │   └── Algorithm Animation.ipynb
│   ├── Evaluation and Results
│   │   ├── ROC
│   │   │   ├── fast_images.ipynb
│   │   │   └── test_roc.ipynb
│   │   └── plot_probabilities.ipynb
│   ├── Excel Matrix
│   │   └── format_matrix_for_excel.py
│   ├── Group Distributions
│   │   ├── get_group_distribution_diagrams.py
│   │   ├── proportional_distribution_reprod.svg
│   │   └── relative_distributions_reprod.svg
│   ├── Kinase Overlap
│   │   ├── .ipynb_checkpoints
│   │   ├── Uniprot_ST_Kinases.xlsx
│   │   ├── Uniprot_Y_Kinases.xlsx
│   │   ├── human_kinase_overlap.pdf
│   │   ├── kinase_overlap.ipynb
│   │   ├── psp_human_kinase_table.csv
│   │   └── psp_kinase_table.csv
│   ├── Phylo Families
│   │   ├── .lintr
│   │   ├── phylo_families.R
│   │   └── phylo_families_Cairo.pdf
│   ├── Sankey
│   │   ├── big_sankey.pdf
│   │   ├── flows.csv
│   │   └── make_sankey.py
│   ├── Similarity Hist
│   │   ├── GMM.ipynb
│   │   ├── similarity_hist.ipynb
│   │   └── similarity_hist.py
│   ├── Stripes
│   │   ├── Newer Version
│   │   │   └── motif_site_diagrams.ipynb
│   │   └── motif_site_diagrams.ipynb
│   └── Sunburst
│       ├── .ipynb_checkpoints
│       ├── Onion Explainer.xlsx
│       ├── sunburst explainer simple.pdf
│       ├── sunburst explainer.pdf
│       ├── sunburst.pdf
│       └── sunburst.py
├── models;Directory containing the implementation of components of the DeepKS model.
│   ├── HPTuningSimple.py; may not work.
│   ├── data_dict_output_test.csv
│   ├── group_classifier_definitions.py;Contains python definitions of the group classifiers (<code>class SKGroupClassifier</code>).
│   ├── individual_classifiers.py;Contains python definitions of the individual neural network classifiers (<code>class IndividualClassifier</code>).
│   ├── json;Contains auxillary <code>.json</code> files used by the model.
│   │   ├── hp_tuning_grids.json;Contains hyperparameter tuning grids for the neural networks.
│   │   └── tok_dict.json;Contains the token dictionary (mapping amino acid character + ["X", padding token, n-gram size]) used to tensorize neural network input data.
│   ├── main.py;Contains definitions of the PyTorch neural network models used in DeepKS.
│   ├── multi_stage_classifier.py;Contains python definitions of the multi-stage classifier (<code>class MultiStageClassifier</code>) that combines the group and individual classifiers.
│   ├── needleall.error
│   ├── run_individual_classifiers.sh;Convenience script for training the individual classifiers and obtaining weights.
│   └── train_multi_stage_classifier.sh;Convenience script for training the group classifier (as a step in multi-stage classification process).
├── out;Directory containing resultant predictions from the DeepKS model. (Examples below.)
│   ├── .gitignore
│   ├── 2023-02-06@16`09`03.421-05`00.json
│   ├── 2023-02-06@16`13`52.192-05`00.json
│   ├── 2023-02-06@16`32`41.136-05`00.json
│   ├── 2023-02-06@16`33`18.145-05`00.json
│   ├── 2023-02-06@16`34`15.988-05`00.json
│   ├── 2023-02-06@16`36`53.070-05`00.json
│   ├── 2023-02-06@16`37`40.707-05`00.json
│   ├── 2023-02-06@16`38`39.411-05`00.json
│   ├── 2023-02-06@16`39`00.218-05`00.json
│   ├── 2023-02-06@16`39`55.302-05`00.json
│   ├── 2023-02-06@16`43`04.597-05`00.json
│   ├── 2023-02-06@16`48`52.912-05`00.json
│   ├── 2023-02-06@19`27`20.125-05`00.json
│   ├── 2023-02-06@19`51`16.867-05`00.json
│   ├── 2023-02-06@19`52`46.887-05`00.json
│   ├── 2023-02-06@20-08-02.692-05-00.json
│   ├── 2023-02-06@20`03`10.580-05`00.json
│   ├── 2023-02-06@20`04`03.199-05`00.json
│   ├── 2023-02-08@01`15`44.058-05`00.json
│   ├── 2023-02-08@01`19`09.417-05`00.json
│   ├── 2023-02-08@01`24`45.157-05`00.json
│   ├── 2023-02-15@14`47`56`6@-05`00.json
│   ├── 2023-02-15@14`47`58`2@-05`00.json
│   ├── 2023-02-15@14`47`59`6@-05`00.json
│   ├── 2023-02-15@16`04`49`6@-05`00.json
│   ├── 2023-02-15@16`04`51`7@-05`00.json
│   ├── 2023-02-15@16`04`53`5@-05`00.json
│   ├── 2023-02-15@16`09`06`1@-05`00.json
│   ├── 2023-02-15@16`09`07`6@-05`00.json
│   ├── 2023-02-15@16`09`09`9@-05`00.json
│   ├── 2023-02-15@16`11`33`2@-05`00.json
│   ├── 2023-02-15@16`11`34`5@-05`00.json
│   ├── 2023-02-15@16`11`36`7@-05`00.json
│   ├── 2023-02-15@16`18`30`7@-05`00.json
│   ├── 2023-02-15@16`18`32`4@-05`00.json
│   ├── 2023-02-15@16`18`34`0@-05`00.json
│   ├── 2023-02-16@15`59`56`1@-05`00.json
│   ├── 2023-02-16@16`02`21`7@-05`00.json
│   ├── 2023-02-16@16`04`29`2@-05`00.json
│   ├── 2023-02-16@16`05`08`6@-05`00.json
│   ├── 2023-02-16@16`06`14`9@-05`00.json
│   ├── 2023-02-16@16`11`08`6@-05`00.json
│   ├── 2023-02-16@16`12`08`4@-05`00.json
│   ├── 2023-02-16@16`17`41`1@-05`00.json
│   ├── 2023-02-16@16`20`41`6@-05`00.json
│   ├── 2023-02-16@16`31`19`2@-05`00.json
│   ├── 2023-02-16@16`32`19`8@-05`00.json
│   ├── 2023-02-16@16`32`34`5@-05`00.json
│   ├── 2023-02-16@16`34`17`6@-05`00.json
│   ├── 2023-02-16@16`35`09`7@-05`00.json
│   ├── 2023-02-16@16`35`26`1@-05`00.json
│   ├── 2023-02-16@16`42`33`9@-05`00.json
│   ├── 2023-02-16@16`44`28`3@-05`00.json
│   ├── 2023-02-16@16`44`53`5@-05`00.json
│   ├── 2023-02-16@16`45`09`4@-05`00.json
│   ├── 2023-02-16@16`48`01`3@-05`00.json
│   ├── 2023-02-16@16`48`46`2@-05`00.json
│   ├── 2023-02-16@16`49`12`9@-05`00.json
│   ├── 2023-02-16@16`52`08`4@-05`00.json
│   ├── 2023-02-19@20`27`25`5@-05`00.json
│   ├── 2023-02-19@20`27`53`7@-05`00.json
│   ├── 2023-02-19@20`29`26`8@-05`00.json
│   ├── 2023-02-19@20`29`47`0@-05`00.json
│   ├── 2023-02-19@21`08`49`8@-05`00.json
│   ├── 2023-02-19@21`11`28`9@-05`00.json
│   ├── 2023-02-19@21`11`30`5@-05`00.json
│   ├── 2023-02-19@21`11`32`1@-05`00.json
│   ├── 2023-02-19@21`12`36`1@-05`00.json
│   ├── 2023-02-19@21`12`42`5@-05`00.json
│   ├── 2023-02-19@21`12`44`1@-05`00.json
│   ├── 2023-02-19@21`12`46`2@-05`00.json
│   ├── DeepKS_all_14.7M_human_predictions.csv
│   ├── DeepKS_all_14.7M_human_predictions.sqlite
│   ├── results_2023-02-20@22`52`08`4@-05`00`json
│   ├── results_2023-02-20@22`52`19`4@-05`00`json
│   ├── results_2023-02-20@22`52`29`7@-05`00`json
│   ├── results_2023-02-20@22`53`11`1@-05`00`json
│   ├── results_2023-02-20@22`53`17`1@-05`00`json
│   ├── results_2023-02-20@22`53`24`7@-05`00`json
│   ├── results_2023-02-20@22`53`26`8@-05`00`json
│   ├── results_2023-02-21@00`29`28`8@-05`00`json
│   ├── results_2023-02-21@00`29`36`7@-05`00`json
│   ├── results_2023-02-21@00`29`45`3@-05`00`json
│   ├── results_2023-02-21@00`29`47`1@-05`00`json
│   ├── results_2023-02-21@00`43`03`5@-05`00`json
│   ├── results_2023-02-21@00`43`13`7@-05`00`json
│   ├── results_2023-02-21@00`43`23`7@-05`00`json
│   ├── results_2023-02-21@00`43`25`4@-05`00`json
│   ├── results_2023-02-21@13`11`14.8@-05`00.sqlite
│   ├── results_2023-02-21@13`12`45.4@-05`00.sqlite
│   ├── results_2023-02-21@13`14`41.6@-05`00.sqlite
│   ├── results_2023-02-21@13`16`34.6@-05`00.sqlite
│   ├── results_2023-02-21@13`42`38.1@-05`00.sqlite
│   ├── results_2023-02-21@17`48`33.3@+00`00.sqlite;
│   ├── results_2023-02-21@18`51`09.5@+00`00.csv
│   ├── results_2023-02-22@20`26`51.1@+00`00.csv
│   ├── results_2023-02-22@22`44`25.2@+00`00.csv;
│   ├── results_2023-03-01@14`56`39.9@-05`00.json
│   ├── results_2023-03-01@15`14`58.8@-05`00.json
│   ├── results_2023-03-01@15`32`37.1@-05`00.json
│   ├── results_2023-03-01@15`34`59.0@-05`00.json
│   ├── results_2023-03-01@15`35`19.9@-05`00.json
│   ├── results_2023-03-01@15`39`29.4@-05`00.json
│   ├── results_2023-03-01@15`42`31.8@-05`00.json
│   ├── results_2023-03-01@15`43`44.6@-05`00.json
│   ├── results_2023-03-01@15`44`42.5@-05`00.json
│   ├── results_2023-03-01@15`44`56.8@-05`00.json
│   ├── results_2023-03-01@15`45`13.6@-05`00.json
│   ├── results_2023-03-01@15`45`22.4@-05`00.json
│   ├── results_2023-03-01@15`45`24.8@-05`00.csv
│   ├── results_2023-03-01@15`45`27.2@-05`00.sqlite
│   ├── results_2023-03-01@15`45`28.3@-05`00.json
│   ├── results_2023-03-01@15`45`29.7@-05`00.json
│   ├── results_2023-03-01@18`20`00.7@-05`00.json
│   ├── results_2023-03-01@18`20`20.1@-05`00.json
│   ├── results_2023-03-01@18`20`22.8@-05`00.csv
│   ├── results_2023-03-01@18`20`25.4@-05`00.sqlite
│   ├── results_2023-03-01@18`20`27.0@-05`00.json
│   ├── results_2023-03-01@18`20`28.6@-05`00.json
│   ├── results_2023-03-01@19`48`06.4@-05`00.json
│   ├── results_2023-03-01@19`48`22.8@-05`00.json
│   ├── results_2023-03-01@19`48`25.3@-05`00.csv
│   ├── results_2023-03-01@19`48`27.6@-05`00.sqlite
│   ├── results_2023-03-01@19`48`29.9@-05`00.json
│   ├── results_2023-03-01@19`48`31.5@-05`00.json
│   ├── results_2023-03-02@12`16`14.8@-05`00.csv
│   ├── results_2023-03-02@12`18`32.5@-05`00.csv
│   ├── results_2023-03-02@13`07`50.2@-05`00.csv
│   ├── results_2023-03-02@13`12`59.5@-05`00.json
│   ├── results_2023-03-02@13`13`02.5@-05`00.csv
│   ├── results_2023-03-02@13`13`16.4@-05`00.json
│   ├── results_2023-03-02@13`13`18.5@-05`00.csv
│   ├── results_2023-03-02@13`13`20.9@-05`00.sqlite
│   ├── results_2023-03-02@13`13`22.6@-05`00.json
│   └── results_2023-03-02@13`13`25.0@-05`00.json
├── public;Used for Gitlab pages
│   └── .gitkeep
├── readme.md;Holds the icon one can click to view the Git(hub|lab) documentation pages.
├── requirements.txt;Used to install python dependencies.
├── saved_dict_repr_file.json
├── splash;Module used to generate splash screens.
│   ├── main_api.splash;Splash screen for the API.
│   ├── main_gc_trainer.splash;Splash screen for the group classifier trainer.
│   ├── main_nn_trainer.splash;Splash screen for the neural network trainer.
│   └── write_splash.py;Script that actually prints the splash screens to the terminal.
├── tests;Unit tests for the project.
│   ├── sample_inputs;Sample inputs for the unit tests.
│   │   ├── kin-info-known-groups.json
│   │   ├── kin-info.json;
│   │   ├── kins.txt;
│   │   ├── site-info.json;
│   │   ├── sites-prod.txt;
│   │   └── sites.txt;
│   └── test.py;Main testing script to run.
└── tools;Miscellaneous tools used in the project.
    ├── NNInterface.py;Definition of large class (<code>class NNInterface</code>) that provides a clean user interface for NN training, predict, plotting, saving, among other things
    ├── SimpleTuner.py;Definition of the <code>class SimpleTuner</code> that provides a clean user interface for hyperparameter tuning.
    ├── bipartite_derangement.py;Contains functions that generate derangements using bipartite graphs.
    ├── custom_tree_maker.py;Custom module to make flexible file trees.
    ├── description.txt
    ├── file_names.py;Module that creates time-stamped files with a prefix and suffix.
    ├── formal_layers.py;Contains definitions for wrapper classes for PyTorch layers that don't have a formal definition in PyTorch. For example, <code>class Flatten</code> is a wrapper for <code>torch.nn.Flatten</code>.
    ├── get_array_percentile.py;Given a <code>numpy</code> array, returns boolean array representing whether each element is in the top <code>percentile</code> of the array.
    ├── get_needle_pairwise.py;Script to get pairwise distances using EMBOSS's <code>needle</code> program.
    ├── informative_tb.py;Script to print a more informative, user-friendly traceback.
    ├── make_fasta.py
    ├── model_utils.py;Contains various functions that support the neural network definitions in <code>DeepKS/models/main.py</code>.
    ├── parse.py;Contains parsing functions for parsing command line when training/testing the neural network component of DeepKS.
    ├── roc_lambda.py
    ├── schema_validation.py;Script that validates a JSON file against a JSON schema. Specifically used to validate the JSON files that contain site and kinase information (metadata).
    ├── system_tools.py;Script containing a wrapper for <code>subprocess.run</code> that can print and/or capture the output of a command.
    ├── tensorize.py;Script that converts a CSV or <code>pandas.DataFrame</code> into a <code>torch.Tensor</code>, moves it to the computation device, and creates a <code>torch.utils.data.DataLoader</code>s.
    └── tree_template.html
